/*
 * Copyright 2008-2013 Hippo B.V. (http://www.onehippo.com)
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *  http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Menu: Connect projects from different sources
 * Script-Path: /hippo-cms-tools-eclipse/monkey/convertDependencies.gm
 * Kudos: Wander Grevink(onehippo.com)
 * License: Apache 2.0
 * Job: WorkspaceJob
 * Exec-Mode: Foreground
 * DOM: http://groovy-monkey.sourceforge.net/update/plugins/net.sf.groovyMonkey.dom
 */
import org.eclipse.jdt.internal.core.SetClasspathOperation;
import org.eclipse.jdt.core.IClasspathEntry;
import org.eclipse.jdt.internal.core.ClasspathEntry;
import org.eclipse.jdt.core.IPackageFragmentRoot;
import org.eclipse.jdt.core.IClasspathAttribute;
import org.eclipse.core.internal.resources.Workspace;

out.clear();

def resultMap = new HashMap();
def projectList = workspace.root.projects;
def projectMap = new HashMap();
projectList.each() {
    if (it.isOpen()) {
        projectMap.put(it.name, it);
    }
}

projectList.each() {
    if (it.isOpen() && it.isNatureEnabled('org.eclipse.jdt.core.javanature')) {
        def projectName = it.name;
        def javaProject = it.getNature('org.eclipse.jdt.core.javanature');
        def projectClasspath = javaProject.rawClasspath;

        projectClasspath.each() {
            if (it.getEntryKind() == IClasspathEntry.CPE_VARIABLE) {
                def entry = it.getPath(); 
                def name = entry.segments[entry.segmentCount()-3];
                if (projectMap.get(name) != null) {
                    def classpath = new LinkedHashSet(Arrays.asList(javaProject.rawClasspath));
                    def toBeRemoved = it; 
                    def toBeAdded = new ClasspathEntry(
			          IPackageFragmentRoot.K_SOURCE,      // indicates this classpath entry contains source files.
			          IClasspathEntry.CPE_PROJECT,        // indicates a required project.
			          projectMap.get(name).getFullPath(), // target project
			          ClasspathEntry.INCLUDE_ALL,         // inclusion patterns
			          ClasspathEntry.EXCLUDE_NONE,        // exclusion patterns
			          null,                               // source attachment
			          null,                               // source attachment root
			          null,                               // specific output folder
			          false,                              // isExported
			          null,                               // accessRules
			          true,                               // combineAccessRules
			          (IClasspathAttribute[])[]           // extraAttributes
			        );
			       
			        if(!resultMap.containsKey(projectName)) {
			            resultMap.put(projectName, new LinkedList());  
			        }
			        resultMap.get(projectName).add("Binary dependency [${toBeRemoved.getPath()}] has been replaced by project: [${toBeAdded.getPath().makeRelative()}]");
                    
                    classpath.remove(toBeRemoved);
                    classpath.add(toBeAdded);
                    def newClasspath = (IClasspathEntry[])classpath.toArray();
                    def op = new SetClasspathOperation(javaProject, newClasspath, javaProject.getOutputLocation(), true);
                    op.runOperation(monitor);
                }
            }
        };
    }
}

if (resultMap.size() > 0) {
    def totalProjects = resultMap.size();
    def totalBinaries = 0;
    def values = resultMap.values();
    values.each() {
        totalBinaries += it.size();
    }
    
    println "Converted $totalBinaries binary dependencies to Eclipse project dependencies for $totalProjects project(s):";
    println "";
    
    def keyIt = resultMap.keySet().iterator();
    while(keyIt.hasNext()) {
        def key = keyIt.next();
        println " - $key";
        def l = resultMap.get(key);
        for(s in l) {
            println "  - $s";
        }
        println "";
    }
        
    
} else {
    println "No projects found that can be connected";
    println "";
    println "Connecting projects can come in useful if you are working on multiple projects from different sources:";
    println "* Hippo ECM and Wicket and/or Jackrabbit";
    println "* A collection of plugins from hippoforge";
    println "* Your set of plugins and Hippo ECM";
    println "";
    println "This script searches your workspace for binary dependencies that can it can convert to project dependencies.";
    println "This works for Java projects generated using 'mvn eclipse:eclipse'. Note that only the depencency name (artifactId) is";
    println "used for determining if it can be converted and not it's version, if a depencency's artifactId matches a java project";
    println "name it will be converted.";
}
